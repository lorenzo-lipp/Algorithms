/* 
Problem 61: Cyclical figurate numbers

Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:
Type of Number      Formula             Sequence
Triangle            P3(n)=n(n+1)/2      1, 3, 6, 10, 15, ...
Square	            P4(n)=n^2         	1, 4, 9, 16, 25, ...
Pentagonal	        P5(n)=n(3n−1)/2   	1, 5, 12, 22, 35, ...
Hexagonal	        P6(n)=n(2n−1)    	1, 6, 15, 28, 45, ...
Heptagonal	        P7(n)=n(5n−3)/2 	1, 7, 18, 34, 55, ...
Octagonal	        P8(n)=n(3n−2)    	1, 8, 21, 40, 65, ...
The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.
1. The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
2. Each polygonal type: triangle (P3(127)=8128), square (P4(91)=8281), and pentagonal (P5(44)=2882), is represented by a different number in the set.
3. This is the only set of 4-digit numbers with this property.
Find the sum of all numbers in ordered sets of n cyclic 4-digit numbers for which each of the P3 to Pn+2 polygonal types, is represented by a different number in the set.
*/

function cyclicalFigurateNums(n) {
    let sum = 0;

    let triangles = getFourDigitNumbers(n => n * (n + 1) / 2);
    let squares = getFourDigitNumbers(n => n * n);
    let pentagons = getFourDigitNumbers(n => n * (3 * n - 1) / 2);
    let hexagons = getFourDigitNumbers(n => n * (2 * n - 1));
    let heptagons = getFourDigitNumbers(n => n * (5 * n - 3) / 2);
    let octagons = getFourDigitNumbers(n => n * (3 * n - 2));
    let allTypes = [triangles, squares, pentagons, hexagons, heptagons, octagons];
    let types = allTypes.slice(0, n - 1);

    for (let num of allTypes[n - 1]) {
        let cycles = findCycles(num, types, true);

        if (cycles.length) {
            cycles = removeDuplicates(cycles);

            for (let cycle of cycles) {
                let ignoreCycle = false;

                for (let i = 0; i < cycle.length; i++) {
                    for (let j = i + 1; j < cycle.length; j++) {
                        if (cycle[i] === cycle[j]) ignoreCycle = true;
                    }
                }

                if (!ignoreCycle) {
                    sum += cycle.reduce((a, b) => a + b);
                }
            }
        }
    }

    return sum;
}

function findCycles(actual, types, isStart = false) {
    let cycles = [];
    let firstTwoDigits = Math.floor(actual / 100);

    if (types.length === 0) return [[actual]];

    for (let i = 0; i < types.length; i++) {
        for (let num of types[i]) {
            if (endsWithDigits(firstTwoDigits, num)) {
                let subcycles = findCycles(num, types.filter((_, index) => index !== i));

                if (subcycles.length) {
                    for (let subcycle of subcycles) {
                        cycles.push([actual, ...subcycle]);
                    }
                }
            }
        }
    }

    if (isStart) {
        return cycles.filter(cycle => endsWithDigits(Math.floor(cycle[cycle.length - 1] / 100), actual));
    }

    return cycles;
}

function getFourDigitNumbers(formula) {
    let result = [];
    let lastResult = null;

    for (let n = 1; lastResult < 10000; n++) {
        lastResult = formula(n);

        if (lastResult < 1000 || lastResult > 10000) continue;

        result.push(lastResult);
    }

    return result;
}

function endsWithDigits(firstTwoDigits, b) {
    let lastTwoDigits = b % 100;

    return firstTwoDigits === lastTwoDigits;
}

function removeDuplicates(arr) {
    let newArr = [];

    for (let i = 0; i < arr.length; i++) {
        let isValid = true;

        for (let j = i + 1; j < arr.length; j++) {
            isValid = isValid && !arr[i].every((v, index) => arr[j][index] === v);
        }

        if (isValid) newArr.push(arr[i]);
    }

    return newArr
}

module.exports = { cyclicalFigurateNums };